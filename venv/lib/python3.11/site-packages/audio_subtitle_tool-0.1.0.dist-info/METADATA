Metadata-Version: 2.3
Name: audio-subtitle-tool
Version: 0.1.0
Summary: 오디오 파일을 SRT 자막으로 변환하는 CLI 도구
Author: 사용자
Author-email: user@example.com
Requires-Python: >=3.11.11,<3.12
Classifier: Programming Language :: Python :: 3
Requires-Dist: click (>=8.1.7,<9.0.0)
Requires-Dist: ffmpeg-python (>=0.2.0,<0.3.0)
Requires-Dist: google-api-python-client (>=2.123.0,<3.0.0)
Requires-Dist: google-auth-httplib2 (>=0.2.0,<0.3.0)
Requires-Dist: google-auth-oauthlib (>=1.2.0,<2.0.0)
Requires-Dist: langchain (>=0.1.12,<0.2.0)
Requires-Dist: langchain-anthropic (>=0.1.4,<0.2.0)
Requires-Dist: openai (>=1.30.1,<2.0.0)
Requires-Dist: python-dotenv (>=1.0.0,<2.0.0)
Requires-Dist: requests (>=2.31.0,<3.0.0)
Requires-Dist: tqdm (>=4.66.2,<5.0.0)
Description-Content-Type: text/markdown

# 오디오 자막 변환기 CLI

이 프로젝트는 오디오 또는 비디오 파일을 SRT 자막으로 변환하고, 비디오에 자막을 합성하는 CLI 도구입니다.

## 기능

- OpenAI Whisper API를 사용한 음성 인식 및 자막 생성
- 오디오 및 비디오 파일에서 자막 추출 지원
- 진행 상황 표시 기능
- SRT 형식으로 자막 파일 저장
- 큰 오디오 파일 자동 분할 처리 (OpenAI API 25MB 제한 우회)
- 비디오 파일에 SRT 자막 하드코딩 기능
- 다양한 비디오 인코딩 옵션 지원 (해상도, 코덱, 프레임율, 프리셋)
- 비디오 샘플링 기능 (특정 구간만 빠르게 처리)
- Google Drive 파일 업로드 기능 (개인 드라이브 및 공유 드라이브 지원)
- 불필요한 단어("어", "그", "저" 등) 필터링 기능

## 요구 사항

- Python 3.8 이상
- FFmpeg (시스템에 설치되어 있어야 함)
- OpenAI API 키
- Google Drive API 인증 정보 (Google Drive 업로드 기능 사용 시)

## 설치 및 실행

이 프로젝트는 Poetry를 사용하여 의존성을 관리합니다.

```bash
# FFmpeg 설치 (macOS)
brew install ffmpeg

# 의존성 설치
poetry install

# OpenAI API 키 설정
export OPENAI_API_KEY="your-api-key-here"
```

## 사용 방법

### 1. 오디오 또는 비디오 파일을 SRT 자막으로 변환

기본 사용법:

```bash
# 오디오 파일 변환
poetry run transcriber --source-file 오디오파일.m4a

# 비디오 파일 변환 (자동으로 오디오 추출 후 처리)
poetry run transcriber --source-file 비디오파일.mp4
```

출력 파일 지정:

```bash
poetry run transcriber --source-file 비디오파일.mp4 --output-file 자막파일.srt
```

API 키 직접 지정:

```bash
poetry run transcriber --source-file 비디오파일.mp4 --api-key "your-api-key-here"
```

청크 길이 조정 (큰 파일 처리 시):

```bash
poetry run transcriber --source-file 비디오파일.mp4 --chunk-duration 5
```

불필요한 단어 필터링:

```bash
poetry run transcriber --source-file 비디오파일.mp4 --filter-filler
```

지원되는 파일 형식:
- 비디오: MP4, AVI, MKV, MOV, WMV, FLV, WEBM, M4V
- 오디오: MP3, WAV, M4A, AAC, OGG, FLAC

### 2. 비디오 파일에 SRT 자막 합성

기본 사용법:

```bash
poetry run subtitle-burner --video-file 비디오파일.mp4 --subtitle-file 자막파일.srt
```

출력 파일 지정:

```bash
poetry run subtitle-burner --video-file 비디오파일.mp4 --subtitle-file 자막파일.srt --output-file 출력파일.mp4
```

자막 스타일 조정:

```bash
poetry run subtitle-burner --video-file 비디오파일.mp4 --subtitle-file 자막파일.srt --font-size 28 --font-color yellow --outline-width 3
```

비디오 프리셋 사용:

```bash
poetry run subtitle-burner --video-file 비디오파일.mp4 --subtitle-file 자막파일.srt --preset 1080p
```

코덱 및 해상도 직접 지정:

```bash
poetry run subtitle-burner --video-file 비디오파일.mp4 --subtitle-file 자막파일.srt --codec h265 --width 1920 --height 1080 --fps 30
```

샘플 모드 (처음 1분만 처리):

```bash
poetry run subtitle-burner --video-file 비디오파일.mp4 --subtitle-file 자막파일.srt --sample
```

샘플 모드 (특정 구간 처리):

```bash
poetry run subtitle-burner --video-file 비디오파일.mp4 --subtitle-file 자막파일.srt --sample --sample-start 120 --sample-duration 30
```

### 3. Google Drive에 파일 업로드

Google Drive API 설정:

1. [Google Cloud Console](https://console.cloud.google.com/)에서 프로젝트 생성
2. Google Drive API 활성화
3. OAuth 2.0 클라이언트 ID 생성 (데스크톱 애플리케이션 유형)
4. 인증 정보 JSON 파일 다운로드 (credentials.json)

사용 가능한 공유 드라이브 목록 확인:

```bash
poetry run drive-uploader list-drives
```

토큰 문제가 있는 경우 새 토큰 생성:

```bash
poetry run drive-uploader list-drives --force-new-token
```

저장된 토큰 삭제:

```bash
poetry run drive-uploader delete-token
```

파일 업로드 (기본 사용법):

```bash
poetry run drive-uploader upload --file 업로드할파일.mp4
```

특정 폴더에 업로드:

```bash
poetry run drive-uploader upload --file 업로드할파일.mp4 --folder "내폴더/하위폴더"
```

공유 드라이브에 업로드:

```bash
poetry run drive-uploader upload --file 업로드할파일.mp4 --shared-drive "공유드라이브이름"
```

공유 드라이브의 특정 폴더에 업로드:

```bash
poetry run drive-uploader upload --file 업로드할파일.mp4 --shared-drive "공유드라이브이름" --folder "내폴더/하위폴더"
```

인증 정보 파일 지정:

```bash
poetry run drive-uploader upload --file 업로드할파일.mp4 --credentials 내인증정보.json
```

MIME 타입 직접 지정:

```bash
poetry run drive-uploader upload --file 업로드할파일.mp4 --mime-type "video/mp4"
```

### Google Drive 업로더 (drive-uploader)

#### 공통 옵션
- `--credentials`, `-c`: Google API 인증 정보 파일 경로 (기본값: credentials.json)
- `--token`, `-t`: 인증 토큰 저장 파일 경로 (기본값: token.pickle)
- `--force-new-token`, `-f`: 기존 토큰을 무시하고 새로운 인증 토큰 생성

#### list-drives 명령
사용 가능한 공유 드라이브 목록을 표시합니다.

```bash
poetry run drive-uploader list-drives [옵션]
```

#### upload 명령
파일을 Google Drive에 업로드합니다.

```bash
poetry run drive-uploader upload --file 파일경로 [옵션]
```

옵션:
- `--file`, `-f`: 업로드할 파일 경로 (필수)
- `--folder`, `-d`: 업로드할 Google Drive 폴더 경로 (예: '폴더1/하위폴더')
- `--shared-drive`, `-sd`: 업로드할 공유 드라이브 이름
- `--mime-type`, `-m`: 파일의 MIME 타입 (지정하지 않으면 자동 감지)

#### delete-token 명령
저장된 인증 토큰을 삭제합니다.

```bash
poetry run drive-uploader delete-token [--token 토큰파일경로]
```

## 옵션

### 오디오 변환 도구 (transcriber)

- `--source-file`, `-s`: 변환할 오디오 또는 비디오 파일 경로 (필수)
- `--output-file`, `-o`: 출력 SRT 파일 경로 (기본값: 입력 파일과 같은 이름, .srt 확장자)
- `--api-key`, `-k`: OpenAI API 키 (기본값: OPENAI_API_KEY 환경 변수)
- `--model`, `-m`: 사용할 Whisper 모델 (기본값: base)
- `--chunk-duration`, `-c`: 큰 파일 분할 시 청크 길이(분) (기본값: 10분)
- `--filter-filler`, `-f`: 불필요한 단어("어", "그", "저" 등) 필터링 (기본값: 비활성화)

### 자막 합성 도구 (subtitle-burner)

#### 자막 관련 옵션
- `--video-file`, `-v`: 자막을 합성할 비디오 파일 경로 (필수)
- `--subtitle-file`, `-s`: 합성할 SRT 자막 파일 경로 (필수)
- `--output-file`, `-o`: 출력 비디오 파일 경로 (기본값: 입력 파일명_subtitled.mp4)
- `--font-size`, `-fs`: 자막 폰트 크기 (기본값: 24)
- `--font-color`, `-fc`: 자막 폰트 색상 (기본값: white)
- `--outline-width`, `-ow`: 자막 테두리 두께 (기본값: 2, 범위: 0-4)
- `--disable-existing-subtitles`, `-des`: 기존 비디오에 내장된 자막 비활성화 (기본값: 비활성화하지 않음)

#### 인코딩 관련 옵션
- `--preset`, `-p`: 비디오 프리셋 (기본값: original)
  - `original`: 원본 설정 유지
  - `720p`: HD 720p (1280x720)
  - `1080p`: Full HD 1080p (1920x1080)
  - `4k`: UHD 4K (3840x2160)
  - `web`: 웹 최적화 (1280x720, 30fps)
  - `mobile`: 모바일 최적화 (854x480, 30fps)
- `--codec`, `-c`: 비디오 코덱 (기본값: original)
  - `original`: 원본 코덱 유지
  - `h264`: H.264 코덱 (호환성 좋음)
  - `h265`: H.265/HEVC 코덱 (더 효율적인 압축)
  - `vp9`: VP9 코덱 (웹 최적화)
  - `av1`: AV1 코덱 (최신 고효율 코덱)
- `--width`, `-w`: 출력 비디오 너비 (기본값: 원본 유지)
- `--height`, `-h`: 출력 비디오 높이 (기본값: 원본 유지)
- `--fps`, `-f`: 출력 비디오 프레임율 (기본값: 원본 유지)
- `--crf`: 비디오 품질 (0-51, 낮을수록 고품질, 기본값: 23)

#### 샘플링 관련 옵션
- `--sample`, `-sm`: 샘플 모드 활성화 (기본값: 비활성화)
- `--sample-duration`, `-sd`: 샘플 길이(초) (기본값: 60초)
- `--sample-start`, `-ss`: 샘플 시작 시간(초) (기본값: 0초)

## 테스트 명령어

input 디렉토리의 비디오 파일을 처리하여 output 디렉토리에 결과물을 저장하는 테스트 명령어입니다:

```bash
# 1. 비디오에서 자막 추출 (불필요한 단어 필터링)
poetry run transcriber --source-file input/test.mp4 --output-file output/test.srt --filter-filler

# 2. 샘플 비디오 생성 (노란색 자막, 1분)
poetry run subtitle-burner --video-file input/test.mp4 --subtitle-file output/test.srt --output-file output/test_sample.mp4 --sample --font-color yellow

# 3. 전체 비디오 생성 (노란색 자막)
poetry run subtitle-burner --video-file input/test.mp4 --subtitle-file output/test.srt --output-file output/test_full.mp4 --font-color yellow
```

## 불필요한 단어 필터링

이 도구는 다음과 같은 불필요한 단어를 자동으로 필터링할 수 있습니다:
- 단일 단어: "어", "음", "그", "저", "아", "에", "흠", "엄", "응"
- 문장 시작 부분의 필러 단어
- 문장 중간의 필러 단어

필터링 기능을 활성화하려면 `--filter-filler` 또는 `-f` 옵션을 사용하세요.

## 큰 파일 처리

이 도구는 OpenAI API의 25MB 파일 크기 제한을 우회하기 위해 큰 오디오 파일을 자동으로 분할하여 처리합니다:

1. 오디오 파일이 25MB를 초과하면 자동으로 분할 모드로 전환됩니다.
2. 파일은 지정된 청크 길이(기본값: 10분)로 분할됩니다.
3. 각 청크는 개별적으로 처리되고 시간 오프셋이 적용됩니다.
4. 모든 청크의 결과가 하나의 SRT 파일로 병합됩니다.

청크 길이를 조정하여 메모리 사용량과 처리 시간을 최적화할 수 있습니다.

## 샘플 모드 활용

샘플 모드는 긴 비디오에서 자막 스타일과 인코딩 설정을 빠르게 테스트하는 데 유용합니다:

1. 기본적으로 처음 60초만 처리합니다.
2. `--sample-start` 옵션으로 시작 시간을 지정할 수 있습니다.
3. `--sample-duration` 옵션으로 샘플 길이를 조정할 수 있습니다.
4. 출력 파일은 기본적으로 `[원본파일명]_sample.mp4` 형식으로 저장됩니다.

## 워크플로우 예시

오디오 파일에서 자막을 추출하고 비디오에 합성한 후 Google Drive에 업로드하는 전체 과정:

```bash
# 1. 오디오 파일에서 자막 추출
poetry run transcriber --source-file 강의.m4a --output-file 강의.srt

# 2. 샘플로 자막 스타일 테스트 (처음 30초만)
poetry run subtitle-burner --video-file 강의.mp4 --subtitle-file 강의.srt --sample --sample-duration 30 --font-size 28

# 3. 최종 비디오 생성 (1080p 해상도, H.265 코덱 사용)
poetry run subtitle-burner --video-file 강의.mp4 --subtitle-file 강의.srt --preset 1080p --codec h265 --font-size 28

# 4. Google Drive에 업로드
poetry run drive-uploader upload --file 강의_subtitled.mp4 --folder "강의자료/완성본"

# 또는 공유 드라이브에 업로드
poetry run drive-uploader upload --file 강의_subtitled.mp4 --shared-drive "팀 드라이브" --folder "강의자료/완성본"
```

## 문제 해결

### Google Drive 업로드 관련 문제

1. **권한 부족 오류**:
   ```
   공유 드라이브 목록을 가져오는 중 오류가 발생했습니다: <HttpError 403 ... "Request had insufficient authentication scopes.">
   ```
   
   해결 방법:
   ```bash
   # 기존 토큰 삭제
   poetry run drive-uploader delete-token
   
   # 또는 새 토큰 강제 생성
   poetry run drive-uploader list-drives --force-new-token
   ```

2. **인증 정보 파일 문제**:
   ```
   오류: credentials.json 파일을 찾을 수 없습니다
   ```
   
   해결 방법:
   - Google Cloud Console에서 OAuth 2.0 클라이언트 ID를 생성하고 credentials.json 파일을 다운로드하세요.
   - 다운로드한 파일을 프로젝트 디렉토리에 저장하세요.

## Confluence 페이지 작성 도구

Confluence에 페이지를 생성하거나 업데이트하는 CLI 도구입니다.

### 사용법

```bash
poetry run writepage --url "https://your-domain.atlassian.net/wiki" \
                    --space "스페이스이름" \
                    --title "페이지 제목" \
                    --content "<h1>페이지 내용</h1><p>HTML 형식으로 작성합니다.</p>"
```

### 환경 변수 설정

다음 세 가지 방법으로 인증 정보를 제공할 수 있습니다:

1. `.env` 파일 사용: `--env-file` 옵션으로 .env 파일 경로 지정
2. 시스템 환경 변수 사용: `CONFLUENCE_USERNAME`, `CONFLUENCE_API_TOKEN` 환경 변수 설정
3. 명령줄 옵션 사용: `--username`, `--api-token` 옵션 사용

`.env` 파일 예시:
```
CONFLUENCE_USERNAME=your-email@example.com
CONFLUENCE_API_TOKEN=your-api-token
```

### 주요 옵션

- `--url`: Confluence URL (필수)
- `--username`: Confluence 계정 이메일
- `--api-token`: Confluence API 토큰
- `--env-file`: .env 파일 경로
- `--space`: Confluence 스페이스 이름 또는 키 (필수)
- `--parent`: 부모 페이지 제목 (선택 사항)
- `--title`: 페이지 제목 (필수)
- `--label`, `-l`: 페이지 레이블 (여러 개 지정 가능)
- `--content-file`: 페이지 내용이 담긴 파일 경로
- `--content`: 페이지 내용 (HTML 형식)
- `--update`: 같은 제목의 페이지가 있으면 업데이트

### 예시

1. 기본 사용법:
```bash
poetry run writepage --url "https://your-domain.atlassian.net/wiki" \
                    --space "스페이스이름" \
                    --title "페이지 제목" \
                    --content "<h1>페이지 내용</h1>"
```

2. 환경 변수 파일 사용:
```bash
poetry run writepage --url "https://your-domain.atlassian.net/wiki" \
                    --env-file .env.local \
                    --space "스페이스이름" \
                    --title "페이지 제목" \
                    --content-file content.html
```

3. 부모 페이지와 레이블 지정:
```bash
poetry run writepage --url "https://your-domain.atlassian.net/wiki" \
                    --space "스페이스이름" \
                    --parent "부모 페이지 제목" \
                    --title "페이지 제목" \
                    --label "라벨1" --label "라벨2" \
                    --content "<h1>페이지 내용</h1>"
```

4. 기존 페이지 업데이트:
```bash
poetry run writepage --url "https://your-domain.atlassian.net/wiki" \
                    --space "스페이스이름" \
                    --title "페이지 제목" \
                    --content "<h1>업데이트된 내용</h1>" \
                    --update
```

## Slack 공지 전송 도구

Confluence 페이지 링크를 받아 AI 세션 녹화본 공유 공지글을 작성하고 슬랙 DM을 보내는 CLI 도구입니다.

### 사용법

```bash
poetry run notice-to-slack \
    --confluence-links "https://your-domain.atlassian.net/wiki/spaces/SPACE/pages/123456789" \
    --related-links "https://example.com/related-doc" \
    --recipient "이동훈"
```

### 환경 변수 설정

다음 방법으로 인증 정보를 제공할 수 있습니다:

1. `.env` 파일 사용: `--env-file` 옵션으로 .env 파일 경로 지정
2. 시스템 환경 변수 사용: `SLACK_API_TOKEN`, `ANTHROPIC_API_KEY` 환경 변수 설정
3. 명령줄 옵션 사용: `--slack-token`, `--anthropic-api-key` 옵션 사용

`.env` 파일 예시:
```
SLACK_API_TOKEN=xoxb-your-slack-api-token
ANTHROPIC_API_KEY=your-anthropic-api-key
```

### 주요 옵션

- `--confluence-links`, `-c`: Confluence 페이지 링크 (여러 개 지정 가능, 필수)
- `--related-links`, `-r`: 관련 문서 링크 (여러 개 지정 가능)
- `--recipient`: 슬랙 DM을 받을 사용자 이름 (기본값: 이동훈)
- `--slack-token`: Slack API 토큰
- `--anthropic-api-key`: Anthropic API 키
- `--env-file`: .env 파일 경로
- `--dry-run`: 실제로 메시지를 보내지 않고 미리보기만 표시
- `--test-mode`: 테스트 모드 활성화 (API 호출 없이 샘플 공지글 생성)

### 예시

1. 기본 사용법:
```bash
poetry run notice-to-slack \
    --confluence-links "https://myrealtrip.atlassian.net/wiki/spaces/AL/pages/4139942192/AI" \
    --related-links "https://lilys.ai" \
    --recipient "이동훈"
```

2. 여러 링크 지정:
```bash
poetry run notice-to-slack \
    --confluence-links "https://myrealtrip.atlassian.net/wiki/spaces/AL/pages/4139942192/AI" \
    --confluence-links "https://myrealtrip.atlassian.net/wiki/spaces/AL/pages/123456789" \
    --related-links "https://lilys.ai" \
    --related-links "https://drive.google.com/drive/folders/1GAhjjkqaM3IBw1LvOaQj97UDG5RY5ily" \
    --recipient "이동훈"
```

3. 환경 변수 파일 사용:
```bash
poetry run notice-to-slack \
    --env-file .env.local \
    --confluence-links "https://myrealtrip.atlassian.net/wiki/spaces/AL/pages/4139942192/AI" \
    --related-links "https://lilys.ai" \
    --recipient "이동훈"
```

4. 미리보기 모드:
```bash
poetry run notice-to-slack \
    --confluence-links "https://myrealtrip.atlassian.net/wiki/spaces/AL/pages/4139942192/AI" \
    --related-links "https://lilys.ai" \
    --dry-run
```

5. 테스트 모드 (API 키 없이 테스트):
```bash
poetry run notice-to-slack \
    --confluence-links "https://myrealtrip.atlassian.net/wiki/spaces/AL/pages/4139942192/AI" \
    --related-links "https://lilys.ai" \
    --test-mode
``` 
